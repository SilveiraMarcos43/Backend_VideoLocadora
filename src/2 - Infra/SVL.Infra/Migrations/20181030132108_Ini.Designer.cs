// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SVL.Infra.Data;

namespace SVL.Infra.Migrations
{
    [DbContext(typeof(BaseContexto))]
    [Migration("20181030132108_Ini")]
    partial class Ini
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("SVL.Domain.Base.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Cep");

                    b.Property<string>("City");

                    b.Property<int>("CustomerId");

                    b.Property<string>("District");

                    b.Property<string>("State");

                    b.Property<string>("StreetDescription");

                    b.HasKey("ID");

                    b.HasIndex("CustomerId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("SVL.Domain.Base.Contato", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CustomerId");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Telefone");

                    b.HasKey("ID");

                    b.HasIndex("CustomerId");

                    b.ToTable("Contato");
                });

            modelBuilder.Entity("SVL.Domain.Base.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("varchar(11)");

                    b.Property<DateTime>("DateBirth");

                    b.Property<string>("Name");

                    b.Property<int>("Sexo");

                    b.HasKey("ID");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("SVL.Domain.Devolution.Devolution", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsFinished");

                    b.Property<int>("LocationId");

                    b.HasKey("ID");

                    b.ToTable("Devolution");
                });

            modelBuilder.Entity("SVL.Domain.Devolution.DevolutionMedia", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DevolutionID");

                    b.HasKey("ID");

                    b.HasIndex("DevolutionID");

                    b.ToTable("DevolutionMedia");
                });

            modelBuilder.Entity("SVL.Domain.Location.LocationMedia", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CustomerId");

                    b.HasKey("ID");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("SVL.Domain.Location.Media", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("LocationMediaID");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.HasIndex("LocationMediaID");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("SVL.Domain.Location.MediaLocation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LocationID");

                    b.HasKey("ID");

                    b.HasIndex("LocationID");

                    b.ToTable("mediaLocations");
                });

            modelBuilder.Entity("SVL.Domain.Location.Wallet", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreditPoints");

                    b.Property<int>("CustomerID");

                    b.HasKey("ID");

                    b.ToTable("Credit");
                });

            modelBuilder.Entity("SVL.Domain.Base.Address", b =>
                {
                    b.HasOne("SVL.Domain.Base.Customer", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SVL.Domain.Base.Contato", b =>
                {
                    b.HasOne("SVL.Domain.Base.Customer", "Customer")
                        .WithMany("Contatos")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SVL.Domain.Devolution.DevolutionMedia", b =>
                {
                    b.HasOne("SVL.Domain.Devolution.Devolution")
                        .WithMany("Medias")
                        .HasForeignKey("DevolutionID");
                });

            modelBuilder.Entity("SVL.Domain.Location.Media", b =>
                {
                    b.HasOne("SVL.Domain.Location.LocationMedia")
                        .WithMany("medias")
                        .HasForeignKey("LocationMediaID");
                });

            modelBuilder.Entity("SVL.Domain.Location.MediaLocation", b =>
                {
                    b.HasOne("SVL.Domain.Location.LocationMedia", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
